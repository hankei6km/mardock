{"pageProps":{"pageData":{"id":"test2","updated":"2021-05-12T10:36:25.162Z","title":"テスト 2","pageNo":1,"pageCount":-1,"allCategory":[],"category":[],"curCategory":"","articleTitle":"テスト 2","htmlToc":{"items":[{"label":"見出しのテスト","items":[],"depth":1,"id":"見出しのテスト"},{"label":"目次のテスト","items":[{"label":"見出し-1","items":[],"depth":2,"id":"見出し-1"},{"label":"見出し-2","items":[],"depth":2,"id":"見出し-2"}],"depth":1,"id":"目次のテスト"},{"label":"テーブル","items":[],"depth":1,"id":"テーブル"},{"label":"画像","items":[],"depth":1,"id":"画像"},{"label":"埋め込み","items":[],"depth":1,"id":"埋め込み"},{"label":"コード","items":[],"depth":1,"id":"コード"},{"label":"その他","items":[],"depth":1,"id":"その他"}]},"html":"<p>ためしにハイブリッド入力で全体を Markdown の記述にしてみる。以下、本文のフォーマットを Markdown(テキストエリア) にしていたときのものをコピペ。わりといける感じかな。</p><hr><p>markdown で記述できるようにしたので書き込んでみる。</p><h3 id=\"見出しのテスト\">見出しのテスト</h3><p>どうなるか。</p><p>この状態でも html 変換後の内容で draftlint ロジックが稼働するはず。</p><p>しないかな？しました。</p><h3 id=\"目次のテスト\">目次のテスト</h3><p>目次も HTML 変換後のものが動作するはず。</p><h4 id=\"見出し-1\">見出し 1</h4><p>テスト。</p><h4 id=\"見出し-2\">見出し 2</h4><p>テスト。</p><h3 id=\"テーブル\">テーブル</h3><p>簡単なテーブルを記述してみる。</p><table><thead><tr><th align=\"left\">項目 1&nbsp;</th><th align=\"right\">項目 2</th><th align=\"right\">項目 3</th></tr></thead><tbody><tr><td align=\"left\">abcabcabc&nbsp; &nbsp; &nbsp;</td><td align=\"right\">1000&nbsp; &nbsp;</td><td align=\"right\">70</td></tr><tr><td align=\"left\">ABCABCABC&nbsp; &nbsp; &nbsp;</td><td align=\"right\">500&nbsp; &nbsp;</td><td align=\"right\">1000</td></tr><tr><td align=\"left\">あいうえお&nbsp;</td><td align=\"right\">2200&nbsp; &nbsp;</td><td align=\"right\">90</td></tr></tbody></table><p>普通にテキストフィールドで markdown 記述してもそうだけど、コードブロック内でテーブルを編集するのはちょっと面倒。</p><h3 id=\"画像\">画像</h3><p>画像を gfm の書式で貼り付け。</p><p><img src=\"https://images.microcms-assets.io/assets/cc433627f35c4232b7cb97e0376507a7/5ef0a57369f6474e8e05c6a66837ac24/2021-03-28-ev-car-sony1.jpg?w=600&amp;h=300\" alt=\"ev car\" width=\"600\" height=\"300\"></p><p>HTML の書き換え処理も入っているのでそれなりで表示される。</p><h3 id=\"埋め込み\">埋め込み</h3><p>とりあえず CodePen でテストしていたスライドを埋め込み。全画面は動作しないが、設定がおかしい？</p><div class=\"embed\"><iframe height=\"529\" style=\"width: 100%;\" scrolling=\"no\" title=\"marp exported\" src=\"https://codepen.io/hankei6km/embed/zYobwJy?height=529&amp;theme-id=light&amp;default-tab=result\" loading=\"lazy\">  See the Pen &#x3C;a href='https://codepen.io/hankei6km/pen/zYobwJy'>marp exported&#x3C;/a> by hankei6km   (&#x3C;a href='https://codepen.io/hankei6km'>@hankei6km&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.</iframe></div><h3 id=\"コード\">コード</h3><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> unified, { Processor, FrozenProcessor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'unified'</span>;\n<span class=\"hljs-keyword\">import</span> rehypeParse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rehype-parse'</span>;\n<span class=\"hljs-keyword\">import</span> rehypeMinifyWhitespace <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rehype-minify-whitespace'</span>;\n<span class=\"hljs-keyword\">import</span> rehypeStringify <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rehype-stringify'</span>;\n<span class=\"hljs-keyword\">import</span> rehypeSanitize <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rehype-sanitize'</span>;\n<span class=\"hljs-keyword\">import</span> merge <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'deepmerge'</span>;\n<span class=\"hljs-keyword\">import</span> gh <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'hast-util-sanitize/lib/github.json'</span>;\n<span class=\"hljs-keyword\">import</span> { Schema } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'hast-util-sanitize'</span>;\n<span class=\"hljs-keyword\">import</span> cheerio <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'cheerio'</span>;\n<span class=\"hljs-keyword\">import</span> { TocItems, HtmlToc } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../types/pageTypes'</span>;\n<span class=\"hljs-keyword\">import</span> { processorMarkdownToHtml } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./markdown'</span>;\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processorHtml</span>(<span class=\"hljs-params\"></span>) </span>{\n&nbsp; <span class=\"hljs-keyword\">return</span> unified().use(rehypeParse, { <span class=\"hljs-attr\">fragment</span>: <span class=\"hljs-literal\">true</span> });\n}\n\n\n<span class=\"hljs-keyword\">const</span> schema = merge(gh, {\n&nbsp; <span class=\"hljs-attr\">tagNames</span>: [<span class=\"hljs-string\">'picture'</span>, <span class=\"hljs-string\">'source'</span>, <span class=\"hljs-string\">'iframe'</span>],\n&nbsp; <span class=\"hljs-attr\">attributes</span>: {\n&nbsp; &nbsp; <span class=\"hljs-attr\">source</span>: [<span class=\"hljs-string\">'srcSet'</span>, <span class=\"hljs-string\">'sizes'</span>],\n&nbsp; &nbsp; <span class=\"hljs-attr\">img</span>: [<span class=\"hljs-string\">'alt'</span>, <span class=\"hljs-string\">'srcSet'</span>, <span class=\"hljs-string\">'sizes'</span>, <span class=\"hljs-string\">'className'</span>],\n&nbsp; &nbsp; <span class=\"hljs-attr\">code</span>: [<span class=\"hljs-string\">'className'</span>],\n&nbsp; &nbsp; <span class=\"hljs-attr\">span</span>: [<span class=\"hljs-string\">'className'</span>],\n&nbsp; &nbsp; <span class=\"hljs-attr\">iframe</span>: [\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'height'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'style'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'scrolling'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'title'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'src'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'frameborder'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'loading'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'allowtransparency'</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'allowfullscreen'</span>\n&nbsp; &nbsp; ]\n&nbsp; }\n});\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">normalizeProcessor</span>(<span class=\"hljs-params\">processor: Processor</span>): <span class=\"hljs-title\">FrozenProcessor</span> </span>{\n&nbsp; <span class=\"hljs-keyword\">return</span> processor\n&nbsp; &nbsp; .use(rehypeMinifyWhitespace)\n&nbsp; &nbsp; .use(rehypeSanitize, (schema <span class=\"hljs-keyword\">as</span> unknown) <span class=\"hljs-keyword\">as</span> Schema)\n&nbsp; &nbsp; .use(rehypeStringify)\n&nbsp; &nbsp; .freeze();\n}\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">normalizedHtml</span>(<span class=\"hljs-params\">\n&nbsp; processor: Processor,\n&nbsp; html: <span class=\"hljs-built_in\">string</span>\n</span>): <span class=\"hljs-title\">Promise</span>&lt;<span class=\"hljs-title\">string</span>&gt; </span>{\n&nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n&nbsp; &nbsp; normalizeProcessor(processor).process(html, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, file</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.error(err);\n&nbsp; &nbsp; &nbsp; &nbsp; reject(err);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; resolve(<span class=\"hljs-built_in\">String</span>(file));\n&nbsp; &nbsp; });\n&nbsp; });\n}</code></pre><h3 id=\"その他\">その他</h3><p><span style=\"color: red\">赤色になるかな。</span></p><p>サニタイズで <code>span</code> の <code>style</code> 属性を許可する必要がありました。</p><blockquote><p>引用はもスタイルが適用されるはず。 どんな感じかなと。</p></blockquote><p>おわり。</p>","deck":{"slide":{"id":"","minX":0,"minY":0,"width":0,"height":0,"items":[],"css":"","script":[],"source":"","meta":{}},"overview":{"id":"","minX":0,"minY":0,"width":0,"height":0,"items":[],"css":"","script":[],"source":"","meta":{}},"hash":"9ae0b35999ae89826d0557231180e105f0e1f573d65aac9ef41336329590812d"},"mainVisual":{"url":"https://images.microcms-assets.io/assets/cc433627f35c4232b7cb97e0376507a7/eb84db7f1a7a4409bd20ffc27abe60e4/mardock-temp-image.png","width":1280,"height":720},"description":"","meta":{"title":"テスト 2","link":"https://hankei6km.github.io/mardock/docs/test2","updated":"2021-05-12T10:36:25.162Z","keyword":[],"image":"https://images.microcms-assets.io/assets/cc433627f35c4232b7cb97e0376507a7/eb84db7f1a7a4409bd20ffc27abe60e4/mardock-temp-image.png","description":""},"feedUrl":"https://hankei6km.github.io/mardock/assets/feeds/deck.xml"},"items":{"contents":[{"id":"test2","updated":"2021-05-12T10:36:25.162Z","title":"テスト 2","category":[],"articleTitle":"テスト 2","deck":{"id":"","minX":0,"minY":0,"width":0,"height":0,"items":[],"css":"","script":[],"source":"","meta":{}},"mainVisual":{"url":"https://images.microcms-assets.io/assets/cc433627f35c4232b7cb97e0376507a7/eb84db7f1a7a4409bd20ffc27abe60e4/mardock-temp-image.png","width":1280,"height":720},"description":"","meta":{"title":"テスト 2","link":"https://hankei6km.github.io/mardock/docs/test2","updated":"2021-05-12T10:36:25.162Z","keyword":[],"image":"https://images.microcms-assets.io/assets/cc433627f35c4232b7cb97e0376507a7/eb84db7f1a7a4409bd20ffc27abe60e4/mardock-temp-image.png","description":""}},{"id":"test1","updated":"2021-05-12T10:31:18.971Z","title":"テスト 1","category":[{"id":"document","createdAt":"2021-03-16T18:04:40.966Z","updatedAt":"2021-03-16T18:04:40.966Z","publishedAt":"2021-03-16T18:04:40.966Z","revisedAt":"2021-03-16T18:04:40.966Z","title":"ドキュメント","description":"カテゴリーページ: ドキュメントが投稿されるページ。"}],"articleTitle":"テスト 1","deck":{"id":"","minX":0,"minY":0,"width":0,"height":0,"items":[],"css":"","script":[],"source":"","meta":{}},"mainVisual":{"url":"https://images.microcms-assets.io/assets/cc433627f35c4232b7cb97e0376507a7/eb84db7f1a7a4409bd20ffc27abe60e4/mardock-temp-image.png","width":1280,"height":720},"description":"","meta":{"title":"テスト 1","link":"https://hankei6km.github.io/mardock/docs/test1","updated":"2021-05-12T10:31:18.971Z","keyword":[],"image":"https://images.microcms-assets.io/assets/cc433627f35c4232b7cb97e0376507a7/eb84db7f1a7a4409bd20ffc27abe60e4/mardock-temp-image.png","description":""}}],"totalCount":2,"offset":0,"limit":10}},"__N_SSG":true}